import React from "react";
import '../styles/ChildInfoForm.css'
const ChildInfoForm = () => {
    let currentTab = 0;
    const showTab = (n) => {
        let x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        if(n == 0) {
            document.getElementById("prev").style.display = "none";
        }else{
            document.getElementById("prev").style.display = "inline";
        }

        if(n == (x.length - 1)) {
            document.getElementById("next").innerHTML = "Connect with Make-A-Wish";
        }else{
            document.getElementById("next").innerHTML = "Next";
        }
    }
    const nextPrev = (n) => {
        let x = document.getElementsByClassName("tab");
        if (n == 1 && !validateForm()) return false;
        x[currentTab].style.display = "none";
        currentTab = currentTab + n;
        if(currentTab >= x.length){
            document.getElementById("regForm").submit();
            return false;
        }
    };

    const validateForm = () => {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
          // If a field is empty...
          if (y[i].value == "") {
            // add an "invalid" class to the field:
            y[i].className += " invalid";
            // and set the current valid status to false
            valid = false;
          }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
          document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
      }
      
    const fixStepIndicator = (n) => {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
          x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }

    showTab(currentTab);
    return (
        <div className="form-container">
            <h1> Wish Child Form </h1>
            <p>We are eager to get you started on the journey to get your child's wish granted, but first we just need some information.</p>
            <form id="regForm">
                <div className="tab">
                    <label> Child First Name </label>
                    <input type="text" name="child_first" required />
                    <br/> <br />
                    <label for="child_last"> Child Last Name </label>
                    <input type="text" name="child_last" required />
                    <br /> <br />
                    <label for="dob"> Date of Birth </label>
                    <input type="date" name="dob" id="dob" min="2004-04-22" max="2022-04-22" required />
                    <br /> <br />
                    <label for="guardian_first"> Guardian First Name </label>
                    <input type="text" name="guardian_first" required />
                    <br /> <br />
                    <label for="guardian_last"> Guardian Last Name </label>
                    <input type="text" name="guardian_last" required />
                    <br /> <br />
                    <label for="phone"> Guardian Phone Number </label>
                    <input type="tel" id="pmp_phone" name="pmp_phone" pattern="^\d{3}-\d{3}-\d{4}$" required />
                    <br />
                    <br />
                    <label for="pcp_first"> PCP First Name </label>
                    <input type="text" name="pcp_first" required />
                    <br /> <br />
                    <label for="pcp_last"> PCP Last Name </label>
                    <input type="text" name="pcp_last" required />
                    <br /> <br />
                    <label for="pmp_phone"> PCP Contact </label>
                    <input type="tel" id="pmp_phone" name="pmp_phone" pattern="^\d{3}-\d{3}-\d{4}$" required />
                    <br/> <br/>
                </div>
                <div className="tab1">
                    <label for="address">Home Address:</label>
                    <input name="address" type="address" />
                    <br/> <br/>
                    <label for="medical-condition">Wish Child's Medical Condition:</label>
                    <input name="medical-condition" type="text"></input>
                    <br/> <br/>
                    <label for="primary-email">Email Address</label>
                    <input type="email" id="email" pattern=".+@globex\.com" required></input>
                    <br/> <br/>
                    <label for="size"> Wish Child T-Shirt Size </label>
                    <select name="size">
                        <option value="xxsmall">XXS</option>
                        <option value="xsmall">XS</option>
                        <option value="small">S</option>
                        <option value="medium">M</option>
                        <option value="large">L</option>
                    </select>
                </div>
                <div className="buttons">
                    <div>
                        <button type="button" id="prev" onClick={nextPrev(-1)}>Previous</button>
                        <button type="button" id="next" onClick={nextPrev(1)}>Next</button>
                    </div>
                </div>
                <div className="circles">
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                </div>
            </form>
        </div>
    );
};

export default ChildInfoForm;